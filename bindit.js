// Generated by CoffeeScript 1.6.3
(function() {
  window.BindIt = {};

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  BindIt.Logger = console;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var Hash;

  Hash = (function() {
    function Hash() {
      this.keys = [];
      this.values = [];
      Object.defineProperty(this, 'length', {
        get: function() {
          return this.keys.length;
        }
      });
    }

    Hash.prototype.add = function(key, value) {
      var index;
      index = this.keys.indexOf(key);
      if (index < 0) {
        this.keys.push(key);
        this.values.push(value);
        return;
      }
      return this.values[index] = value;
    };

    Hash.prototype.remove = function(key) {
      var index;
      index = this.keys.indexOf(key);
      if (index < 0) {
        return;
      }
      this.keys.splice(index, 1);
      return this.values.splice(index, 1);
    };

    Hash.prototype.clear = function() {
      this.keys.length = 0;
      return this.values.length = 0;
    };

    Hash.prototype.get = function(key) {
      var index;
      index = this.keys.indexOf(key);
      return this.values[index];
    };

    Hash.prototype.getKeyByValue = function(value) {
      var index;
      index = this.values.indexOf(value);
      return this.keys[index];
    };

    Hash.prototype.length = function() {
      return this.keys.length;
    };

    return Hash;

  })();

  BindIt.Hash = Hash;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var EventDispatcher;

  EventDispatcher = (function() {
    function EventDispatcher() {
      this.eventHandlers = {};
    }

    EventDispatcher.prototype.addEventListener = function(eventType, handler) {
      if (this.eventHandlers[eventType] == null) {
        this.eventHandlers[eventType] = [];
      }
      return this.eventHandlers[eventType].push(handler);
    };

    EventDispatcher.prototype.removeEventListener = function(eventType, handler) {
      var index;
      if (this.eventHandlers[eventType] == null) {
        return;
      }
      index = this.eventHandlers[eventType].indexOf(handler);
      if (index < 0) {
        return;
      }
      return this.eventHandlers[eventType].splice(index, 1);
    };

    EventDispatcher.prototype.callEvent = function(eventType, args) {
      var handler, _i, _len, _ref, _results;
      if (this.eventHandlers[eventType] == null) {
        return;
      }
      _ref = this.eventHandlers[eventType];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler.apply(this, args));
      }
      return _results;
    };

    return EventDispatcher;

  })();

  window.BindIt.EventDispatcher = EventDispatcher;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var Model, getModel, getSource, processProperty,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = (function(_super) {
    __extends(Model, _super);

    function Model(source, inner) {
      var property;
      this.source = source;
      if (this.source == null) {
        this.source = {};
      }
      if (this.source instanceof Model) {
        return this.source;
      }
      if (this.source.__bindit_model != null) {
        return this.source.__bindit_model;
      }
      if ((this.source instanceof Array) && inner !== true) {
        return new BindIt.ModelArray(this.source);
      }
      Model.__super__.constructor.call(this);
      Object.defineProperty(this.source, '__bindit_model', {
        get: (function() {
          return this;
        }).bind(this),
        enumerable: false
      });
      if (!(this.source instanceof Array)) {
        for (property in this.source) {
          processProperty(this, property);
        }
      }
    }

    Model.prototype.getSource = function() {
      return this.source;
    };

    return Model;

  })(BindIt.EventDispatcher);

  getModel = function(source) {
    if (source == null) {
      return null;
    }
    if (source instanceof Object) {
      return new Model(source);
    }
    return source;
  };

  getSource = function(model) {
    if (model == null) {
      return null;
    }
    if (model instanceof Model) {
      return model.getSource();
    }
    return model;
  };

  processProperty = function(model, propertyName) {
    if (model.hasOwnProperty(propertyName)) {
      return;
    }
    return Object.defineProperty(model, propertyName, {
      get: function() {
        var result;
        result = model.getSource()[propertyName];
        if (result == null) {
          return null;
        }
        if (result instanceof Function) {
          return result.bind(model);
        }
        if (result instanceof Object) {
          result = new Model(result);
        }
        return result;
      },
      set: function(value) {
        var source, sourceValue;
        source = model.getSource();
        sourceValue = source[propertyName];
        if (value instanceof Model) {
          value = value.getSource();
        }
        if (sourceValue === value) {
          return;
        }
        source[propertyName] = value;
        return this.callEvent(Model.Events.VALUE_CHANGED, [model, propertyName, getModel(sourceValue), getModel(value)]);
      },
      enumerable: true
    });
  };

  Model.processProperty = processProperty;

  Model.Events = {
    VALUE_CHANGED: "value_changed",
    ARRAY_CHANGED: 'array_changed'
  };

  window.BindIt.Model = Model;

  window.BindIt.getModel = getModel;

  window.BindIt.getSource = getSource;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var ModelArray, processArrayItems,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BindIt.Model.ArrayEvents = {
    INSERTED: 'inserted',
    REMOVED: 'removed',
    APOCALYPTIC: 'apocalyptic'
  };

  ModelArray = (function(_super) {
    __extends(ModelArray, _super);

    function ModelArray(source, hasSelectedItems) {
      this.source = source;
      ModelArray.__super__.constructor.call(this, this.source, true);
      BindIt.Model.processProperty(this, 'length');
      this.source.selectedItem = 0;
      BindIt.Model.processProperty(this, 'selectedItem');
      if (hasSelectedItems == null) {
        hasSelectedItems = true;
      }
      if (hasSelectedItems === true) {
        this.source.selectedItems = 0;
        BindIt.Model.processProperty(this, 'selectedItems');
        this.selectedItems = new BindIt.ModelArray([], false);
      }
      processArrayItems(this);
      this.addEventListener(BindIt.Model.Events.VALUE_CHANGED, function(model, propertyName, oldValue, value) {
        if (propertyName !== 'length') {
          return;
        }
        if (oldValue > value) {
          return;
        }
        return processArrayItems(model);
      });
    }

    ModelArray.prototype.push = function(value) {
      var result;
      result = this.getSource().push(BindIt.getSource(value));
      processArrayItems(this);
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.INSERTED, this.getSource().length - 1, BindIt.getModel(value)]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.pop = function() {
      var result;
      result = this.getSource().pop();
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.REMOVED, this.getSource().length, BindIt.getModel(result)]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.concat = function(value) {
      return new BindIt.Model(this.getSource().concat(value));
    };

    ModelArray.prototype.join = function(value) {
      return this.getSource().join(value);
    };

    ModelArray.prototype.reverse = function() {
      var result;
      result = this.getSource().reverse();
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.APOCALYPTIC]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.shift = function() {
      var result;
      result = this.getSource().shift();
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.REMOVED, 0, BindIt.getModel(result)]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.slice = function() {
      return new BindIt.Model(this.getSource().slice.apply(this.getSource(), arguments));
    };

    ModelArray.prototype.sort = function() {
      var result;
      result = this.getSource().sort.apply(this.getSource(), arguments);
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.APOCALYPTIC]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.splice = function() {
      var result;
      result = this.getSource().splice.apply(this.getSource(), arguments);
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.APOCALYPTIC]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.unshift = function(value) {
      var result;
      result = this.getSource().unshift(BindIt.getSource(value));
      this.callEvent(BindIt.Model.Events.ARRAY_CHANGED, [this, BindIt.Model.ArrayEvents.INSERTED, 0, BindIt.getModel(value)]);
      return BindIt.getModel(result);
    };

    ModelArray.prototype.indexOf = function(value) {
      return this.getSource().indexOf(BindIt.getSource(value));
    };

    return ModelArray;

  })(BindIt.Model);

  processArrayItems = function(model) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = model.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(BindIt.Model.processProperty(model, i));
    }
    return _results;
  };

  window.BindIt.ModelArray = ModelArray;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var DOMEventDispatcher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DOMEventDispatcher = (function(_super) {
    __extends(DOMEventDispatcher, _super);

    function DOMEventDispatcher(element) {
      var _this = this;
      this.element = element;
      DOMEventDispatcher.__super__.constructor.call(this);
      BindIt.DOM.addEventHandler(this.element, 'click', function() {
        return _this.callEvent('click', arguments);
      });
    }

    DOMEventDispatcher.prototype.click = function(listener) {
      return this.addEventListener('click', listener);
    };

    return DOMEventDispatcher;

  })(BindIt.EventDispatcher);

  BindIt.DOMEventDispatcher = DOMEventDispatcher;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BindIt.DATA_BIND_ATTRIBUTE = "data-bind";

  BindIt.FORM_BIND_ATTRIBUTE = "form-bind";

  View = (function(_super) {
    __extends(View, _super);

    function View(element) {
      this.element = element;
      this.modelArrayHandler = __bind(this.modelArrayHandler, this);
      this.modelHandler = __bind(this.modelHandler, this);
      if (this.element.__bindit_view != null) {
        throw new Error('Element should have only one view');
      }
      View.__super__.constructor.call(this, this.element);
      element.__bindit_view = this;
      this.subscribes = [];
      this.refreshSubscribes();
    }

    View.prototype.getValue = function(returnArray) {
      var path, result;
      path = this.getModelPath();
      if ((path == null) || path.length === 0) {
        return null;
      }
      try {
        result = eval(path.shift());
      } catch (_error) {}
      while (path.length > 0) {
        if (result == null) {
          return null;
        }
        if (result instanceof BindIt.ModelArray) {
          result = result[result.selectedItem];
        }
        result = result[path.shift()];
      }
      if (result instanceof BindIt.ModelArray && returnArray !== true) {
        result = result[result.selectedItem];
      }
      return result;
    };

    View.prototype.setValue = function(value) {
      var modelPath, parent;
      modelPath = this.getModelPath();
      if (modelPath == null) {
        modelPath = [];
      }
      parent = window;
      while (modelPath.length > 1) {
        if (parent == null) {
          return;
        }
        if (parent instanceof BindIt.ModelArray) {
          parent = parent[parent.selectedItem];
        }
        if (parent == null) {
          return;
        }
        parent = parent[modelPath.shift()];
      }
      if (parent == null) {
        return;
      }
      if (parent instanceof BindIt.ModelArray) {
        parent = parent[parent.selectedItem];
      }
      if (parent == null) {
        return;
      }
      return parent[modelPath[0]] = value;
    };

    View.prototype.callBindFunction = function() {
      var model, modelPath, parent;
      modelPath = this.getModelPath();
      if (modelPath == null) {
        modelPath = [];
      }
      parent = null;
      model = window;
      while (modelPath.length > 0) {
        if (model == null) {
          break;
        }
        if (model instanceof BindIt.ModelArray) {
          parent = model;
          model = model[model.selectedItem];
        }
        if (model == null) {
          break;
        }
        parent = model;
        model = model[modelPath.shift()];
      }
      if ((model == null) || !(model instanceof Function)) {
        return;
      }
      return model.apply(parent, arguments);
    };

    View.prototype.getModelPath = function() {
      var bindingPath, parent;
      bindingPath = this.element.getAttribute(BindIt.DATA_BIND_ATTRIBUTE);
      if (bindingPath === null) {
        return null;
      }
      parent = this.element.parentNode;
      while (parent !== null) {
        if ((parent.hasAttribute != null) && parent.hasAttribute(BindIt.FORM_BIND_ATTRIBUTE)) {
          bindingPath = "" + (parent.getAttribute(BindIt.FORM_BIND_ATTRIBUTE)) + ":" + bindingPath;
        }
        parent = parent.parentNode;
      }
      return bindingPath.split(":");
    };

    View.prototype.modelHandler = function(model, property, oldValue, newValue) {
      this.refreshSubscribes();
      return typeof this.changed === "function" ? this.changed(this, model, BindIt.Model.Events.VALUE_CHANGED, property, oldValue, newValue) : void 0;
    };

    View.prototype.modelArrayHandler = function(model, type, index, value) {
      this.refreshSubscribes();
      return typeof this.changed === "function" ? this.changed(this, model, BindIt.Model.Events.ARRAY_CHANGED, type, index, value) : void 0;
    };

    View.prototype.refreshSubscribes = function() {
      var m, model, modelPath, newSubscribes, toSubscribe, toUnsubscribe, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
      modelPath = this.getModelPath();
      if (modelPath == null) {
        modelPath = [];
      }
      model = window;
      newSubscribes = [];
      while (modelPath.length > 0) {
        if (model == null) {
          break;
        }
        if (model instanceof BindIt.ModelArray) {
          model = model[model.selectedItem];
          if (model instanceof BindIt.Model) {
            newSubscribes.push(model);
          }
        }
        if (model == null) {
          break;
        }
        model = model[modelPath.shift()];
        if (model instanceof BindIt.Model) {
          newSubscribes.push(model);
        }
      }
      this.fillSubscribes(model, newSubscribes, false);
      toUnsubscribe = [];
      toSubscribe = [];
      for (_i = 0, _len = newSubscribes.length; _i < _len; _i++) {
        m = newSubscribes[_i];
        if (this.subscribes.indexOf(m) < 0) {
          toSubscribe.push(m);
        }
      }
      _ref = this.subscribes;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        m = _ref[_j];
        if (newSubscribes.indexOf(m) < 0) {
          toUnsubscribe.push(m);
        }
      }
      for (_k = 0, _len2 = toSubscribe.length; _k < _len2; _k++) {
        m = toSubscribe[_k];
        m.addEventListener(BindIt.Model.Events.VALUE_CHANGED, this.modelHandler);
        if (m instanceof BindIt.ModelArray) {
          m.addEventListener(BindIt.Model.Events.ARRAY_CHANGED, this.modelArrayHandler);
        }
      }
      for (_l = 0, _len3 = toUnsubscribe.length; _l < _len3; _l++) {
        m = toUnsubscribe[_l];
        m.removeEventListener(BindIt.Model.Events.VALUE_CHANGED, this.modelHandler);
        if (m instanceof BindIt.ModelArray) {
          m.removeEventListener(BindIt.Model.Events.ARRAY_CHANGED, this.modelArrayHandler);
        }
      }
      return this.subscribes = newSubscribes;
    };

    View.prototype.fillSubscribes = function(model, subscribes, returnIfModelExists) {
      var item, property, _i, _len, _results;
      if ((model == null) || !(model instanceof BindIt.Model)) {
        return;
      }
      if (subscribes.indexOf(model) >= 0 && returnIfModelExists) {
        return;
      }
      if (subscribes.indexOf(model) < 0) {
        subscribes.push(model);
      }
      if (model instanceof BindIt.ModelArray) {
        this.fillSubscribes(model.selectedItems, subscribes, true);
        for (_i = 0, _len = model.length; _i < _len; _i++) {
          item = model[_i];
          this.fillSubscribes(item, subscribes, true);
        }
        return;
      }
      _results = [];
      for (property in model) {
        _results.push(this.fillSubscribes(model[property], subscribes, true));
      }
      return _results;
    };

    return View;

  })(BindIt.DOMEventDispatcher);

  BindIt.View = View;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var addEventHandler, createView, getViewClass, onload, processElement;

  BindIt.VIEW_ATTRIBUTE = 'view';

  getViewClass = function(element) {
    var className, result;
    className = element.getAttribute(BindIt.VIEW_ATTRIBUTE);
    if (className == null) {
      className = BindIt.View.Default[element.tagName.toLowerCase()];
    }
    if (className == null) {
      className = 'BindIt.View';
    }
    result = BindIt.View;
    try {
      result = eval(className);
    } catch (_error) {}
    return result;
  };

  createView = function(element) {
    var data;
    if (element == null) {
      return;
    }
    if (element.__bindit_view != null) {
      return;
    }
    if (element.getAttribute == null) {
      return;
    }
    data = element.getAttribute(BindIt.DATA_BIND_ATTRIBUTE);
    if (data == null) {
      return;
    }
    return new (getViewClass(element))(element);
  };

  processElement = function(parent) {
    var element, elements, _i, _len, _results;
    createView(parent);
    if (parent.getElementsByTagName == null) {
      return;
    }
    elements = parent.getElementsByTagName('*');
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _results.push(createView(element));
    }
    return _results;
  };

  addEventHandler = function(element, event, handler) {
    if (handler == null) {
      return;
    }
    if (element.addEventListener != null) {
      return element.addEventListener(event, handler);
    }
  };

  BindIt.DOM = {
    getViewClass: getViewClass,
    createView: createView,
    processElement: processElement,
    addEventHandler: addEventHandler
  };

  BindIt.View.Default = {};

  onload = function() {
    return processElement(document);
  };

  (function() {
    BindIt.DOM.addEventHandler(window, 'load', onload);
    return BindIt.DOM.addEventHandler(window, 'DOMSubtreeModified', function(e) {
      return processElement(e.target);
    });
  })();

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var Template, appendChild, fillAttributes, fillChild, getValue,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Template = (function() {
    function Template(template) {
      this.template = template;
      this.create = __bind(this.create, this);
      if (this.template instanceof Template) {
        return this.template;
      }
    }

    Template.prototype.create = function() {
      var result, tagName;
      tagName = getValue(this, this.template.tag, arguments);
      result = tagName != null ? document.createElement(tagName) : document.createDocumentFragment();
      fillAttributes(this, result, arguments);
      fillChild(this, result, arguments);
      return result;
    };

    return Template;

  })();

  fillAttributes = function(t, element, args) {
    var attr, attributes, value, _i, _len, _ref, _results;
    attributes = t.template.attributes;
    if (attributes == null) {
      attributes = {};
    }
    attributes = getValue(t, attributes, args);
    _ref = Template.OftenAttributes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      attr = _ref[_i];
      if (t.template[attr] != null) {
        attributes[attr] = t.template[attr];
      }
    }
    _results = [];
    for (attr in attributes) {
      value = attributes[attr];
      value = getValue(this, value, args);
      _results.push(element.setAttribute(attr, value));
    }
    return _results;
  };

  fillChild = function(t, element, args) {
    var child, count, html, node, text, _i, _len, _results;
    html = getValue(t, t.template.html, args);
    text = getValue(t, t.template.text, args);
    child = getValue(t, t.template.child, args);
    count = (html != null ? 1 : 0) + (text != null ? 1 : 0) + (child != null ? 1 : 0);
    if (count > 1) {
      throw new Error('Template exception. Only one available: html, text, child');
    }
    if (html != null) {
      element.innerHTML = html;
    }
    if (text != null) {
      element.innerText = text;
    }
    if (child != null) {
      _results = [];
      for (_i = 0, _len = child.length; _i < _len; _i++) {
        node = child[_i];
        _results.push(appendChild(t, element, node, args));
      }
      return _results;
    }
  };

  appendChild = function(template, element, node, args) {
    var child, childTemplate, elementNode, templateId;
    child = node;
    if (child instanceof Function) {
      child = child.apply(template, args);
    }
    if (typeof child === 'string') {
      return element.appendChild(document.createTextNode(child));
    }
    if (child instanceof Node) {
      if (node[Template.TEMPLATE_ID_PROPERTY] != null) {
        element[node[Template.TEMPLATE_ID_PROPERTY]] = node;
      }
      if (child instanceof Node) {
        return element.appendChild(node);
      }
    }
    if (child instanceof Object) {
      childTemplate = new Template(child);
      if (childTemplate[Template.TEMPLATE_ID_PROPERTY] != null) {
        templateId = childTemplate[Template.TEMPLATE_ID_PROPERTY];
      }
      if ((childTemplate.template[Template.TEMPLATE_ID_PROPERTY] != null) && (templateId == null)) {
        templateId = childTemplate.template[Template.TEMPLATE_ID_PROPERTY];
      }
      elementNode = childTemplate.create.apply(child, args);
      if (templateId != null) {
        element[templateId] = elementNode;
      }
      return element.appendChild(elementNode);
    }
  };

  getValue = function(template, property, args) {
    var result;
    result = property;
    if (property instanceof Function) {
      result = property.apply(template, args);
    }
    return result;
  };

  Template.OftenAttributes = ['id', 'name', 'class', 'style', 'src', 'href', 'value', BindIt.DATA_BIND_ATTRIBUTE, BindIt.VIEW_ATTRIBUTE, 'item-view', 'type', 'form-bind'];

  Template.TEMPLATE_ID_PROPERTY = 'template-id';

  BindIt.Template = Template;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var ListView, isNumber,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView(element) {
      var _base;
      this.element = element;
      ListView.__super__.constructor.call(this, this.element);
      this.calculateItemView();
      if (this.itemView == null) {
        return;
      }
      if (typeof (_base = this.itemView).init === "function") {
        _base.init(this);
      }
      this.itemsSubscribes = new BindIt.Hash;
      this.itemsElements = [];
      this.changed();
    }

    ListView.prototype.changed = function(view, model, event) {
      var arrayEvent, field, index, oldValue, value;
      field = event === BindIt.Model.Events.VALUE_CHANGED ? arguments[3] : null;
      oldValue = event === BindIt.Model.Events.VALUE_CHANGED ? arguments[4] : null;
      value = arguments[5];
      arrayEvent = event === BindIt.Model.Events.VALUE_CHANGED ? null : arguments[3];
      index = event === BindIt.Model.Events.VALUE_CHANGED ? null : arguments[4];
      this.callChanged(model, event, arrayEvent, index, field, oldValue, value);
      return this.refreshItemsSubscribes();
    };

    ListView.prototype.callChanged = function(model, event, arrayEvent, index, field, oldValue, value) {
      var diff, element, i, item, itemElement, node, viewValue, _i, _j, _k, _l, _len, _len1, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      viewValue = this.getValue(true);
      item = this.itemsSubscribes.get(model);
      if (arrayEvent !== BindIt.Model.ArrayEvents.INSERTED && arrayEvent !== BindIt.Model.ArrayEvents.REMOVED) {
        index = viewValue.indexOf(item);
      }
      itemElement = this.itemsElements[index];
      if ((item != null) && (itemElement != null)) {
        index = viewValue.indexOf(item);
        if ((item != null) && (itemElement != null)) {
          return this.itemView.changed(itemElement, viewValue, index, viewValue.selectedItem === index, viewValue.selectedItems.indexOf(index) >= 0);
        }
      }
      if (model === viewValue && event === BindIt.Model.Events.VALUE_CHANGED) {
        if (field === 'length') {
          if (oldValue < value) {
            for (index = _i = oldValue, _ref = value - 1; oldValue <= _ref ? _i <= _ref : _i >= _ref; index = oldValue <= _ref ? ++_i : --_i) {
              this.element.appendChild(this.createItemElement(model, index));
            }
            return;
          } else {
            while (this.element.childNodes[value] != null) {
              node = this.element.childNodes[this.element.childNodes.length - 1];
              this.element.removeChild(node);
            }
            this.itemsElements.length = value;
            return;
          }
        }
        if (field === 'selectedItem') {
          this.itemView.changed(this.itemsElements[oldValue], viewValue, oldValue, false, viewValue.selectedItems.indexOf(oldValue) >= 0);
          this.itemView.changed(this.itemsElements[value], viewValue, value, true, viewValue.selectedItems.indexOf(oldValue) >= 0);
          return;
        }
        if (field === 'selectedItems') {
          diff = [];
          for (_j = 0, _len = oldValue.length; _j < _len; _j++) {
            item = oldValue[_j];
            diff.push(item);
          }
          for (_k = 0, _len1 = value.length; _k < _len1; _k++) {
            item = value[_k];
            diff.push(item);
          }
          if (diff.length > 0) {
            for (index = _l = 0, _ref1 = diff.length - 1; 0 <= _ref1 ? _l <= _ref1 : _l >= _ref1; index = 0 <= _ref1 ? ++_l : --_l) {
              this.itemView.changed(this.itemsElements[index], viewValue, index, index === viewValue.selectedItem, viewValue.selectedItems.indexOf(index) >= 0);
            }
          }
          return;
        }
        if (isNumber(field)) {
          index = parseInt(field);
          itemElement = this.itemsElements[index];
          if ((value != null) && (itemElement != null)) {
            return this.itemView.changed(itemElement, viewValue, index, viewValue.selectedItem === index, viewValue.selectedItems.indexOf(index) >= 0);
          }
        }
      }
      if (model === viewValue.selectedItems) {
        if (arrayEvent === BindIt.Model.ArrayEvents.INSERTED) {
          itemElement = this.itemsElements[value];
          this.itemView.changed(itemElement, viewValue, value, viewValue.selectedItem === value, viewValue.selectedItems.indexOf(value) >= 0);
          return;
        }
        if (arrayEvent === BindIt.Model.ArrayEvents.REMOVED) {
          itemElement = this.itemsElements[value];
          this.itemView.changed(itemElement, viewValue, value, viewValue.selectedItem === value, viewValue.selectedItems.indexOf(value) >= 0);
          return;
        }
        if (event === BindIt.Model.Events.VALUE_CHANGED) {
          if (isNumber(field)) {
            this.itemView.changed(this.itemsElements[oldValue], viewValue, oldValue, viewValue.selectedItem === oldValue, viewValue.selectedItems.indexOf(oldValue) >= 0);
            this.itemView.changed(this.itemsElements[value], viewValue, value, viewValue.selectedItem === value, viewValue.selectedItems.indexOf(value) >= 0);
            return;
          }
        }
      }
      if (model === viewValue && arrayEvent === BindIt.Model.ArrayEvents.INSERTED) {
        element = this.createItemElement(model, index);
        if (viewValue.length > index + 1) {
          for (i = _m = _ref2 = index + 1, _ref3 = viewValue.length - 1; _ref2 <= _ref3 ? _m <= _ref3 : _m >= _ref3; i = _ref2 <= _ref3 ? ++_m : --_m) {
            this.itemView.changed(this.itemsElements[i], viewValue, i, viewValue.selectedItem === i, viewValue.selectedItems.indexOf(i) >= 0);
          }
        }
        if (index === model.length - 1) {
          return this.element.appendChild(element);
        }
        return this.element.insertBefore(element, this.element.childNodes[index]);
      }
      if (model === viewValue && arrayEvent === BindIt.Model.ArrayEvents.REMOVED) {
        this.itemsElements.splice(index, 1);
        if (viewValue.length > index) {
          for (i = _n = _ref4 = index, _ref5 = viewValue.length - 1; _ref4 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = _ref4 <= _ref5 ? ++_n : --_n) {
            this.itemView.changed(this.itemsElements[i], viewValue, i, viewValue.selectedItem === i, viewValue.selectedItems.indexOf(i) >= 0);
          }
        }
        return this.element.removeChild(this.element.childNodes[index]);
      }
      return this.apocalyptic();
    };

    ListView.prototype.calculateItemView = function() {
      var e, path;
      if (!this.element.hasAttribute(ListView.ITEM_VIEW_ATTRIBUTE)) {
        BindIt.Logger.warn("BindIt.View.ListView: element hasn't '" + ListView.ITEM_VIEW_ATTRIBUTE + "' attribute", this.element);
        return;
      }
      path = this.element.getAttribute(ListView.ITEM_VIEW_ATTRIBUTE);
      try {
        this.itemView = eval(path);
      } catch (_error) {
        e = _error;
        BindIt.Logger.warn("BindIt.View.ListView: invalid '" + ListView.ITEM_VIEW_ATTRIBUTE + "' attribute", this.element);
        return;
      }
      if (this.itemView == null) {
        return BindIt.Logger.warn("BindIt.View.ListView: invalid '" + ListView.ITEM_VIEW_ATTRIBUTE + "' attribute", this.element);
      }
    };

    ListView.prototype.apocalyptic = function() {
      var fragment, index, value, _i, _ref;
      while (this.element.firstChild != null) {
        this.element.removeChild(this.element.firstChild);
      }
      this.itemsElements = [];
      value = this.getValue(true);
      if (value == null) {
        return;
      }
      fragment = document.createDocumentFragment();
      if (value.length > 0) {
        for (index = _i = 0, _ref = value.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
          fragment.appendChild(this.createItemElement(value, index));
        }
      }
      return this.element.appendChild(fragment);
    };

    ListView.prototype.createItemElement = function(value, index) {
      var element;
      element = this.itemView.create(value, index, value.selectedItem === index, value.selectedItems.indexOf(index) >= 0);
      this.itemsElements.splice(index, 0, element);
      return element;
    };

    ListView.prototype.refreshItemsSubscribes = function() {
      var item, subscribe, subscribes, value, _i, _len, _results;
      value = this.getValue(true);
      if (value == null) {
        return;
      }
      this.itemsSubscribes.clear();
      _results = [];
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        item = value[_i];
        if (item != null) {
          subscribes = [];
          this.fillSubscribes(item, subscribes, true);
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = subscribes.length; _j < _len1; _j++) {
              subscribe = subscribes[_j];
              _results1.push(this.itemsSubscribes.add(subscribe, item));
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return ListView;

  })(BindIt.View);

  isNumber = function(value) {
    var i;
    i = parseInt(value);
    return i === value;
  };

  ListView.ITEM_VIEW_ATTRIBUTE = 'item-view';

  BindIt.View.List = ListView;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var InputView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InputView = (function(_super) {
    __extends(InputView, _super);

    function InputView(element) {
      var inputClass, type;
      this.element = element;
      type = this.element.getAttribute('type') || 'undefined';
      inputClass = InputView.byType[type.toLowerCase()];
      if ((inputClass != null) && inputClass instanceof Function) {
        return new inputClass(this.element);
      }
      BindIt.Logger.warn("Can't find view class for input tag with type '" + type + "'", this.element);
    }

    return InputView;

  })(BindIt.View);

  InputView.byType = {};

  BindIt.View.Input = InputView;

  BindIt.View.Default.input = InputView;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var ButtonView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ButtonView = (function(_super) {
    __extends(ButtonView, _super);

    function ButtonView(element) {
      var _this = this;
      this.element = element;
      ButtonView.__super__.constructor.call(this, this.element);
      this.setEnabled(this.getValue(false));
      this.click(function() {
        var model;
        model = _this.getValue(false);
        if (!_this.getEnabled(model)) {
          return;
        }
        if (model instanceof Function) {
          return _this.callBindFunction();
        }
        if (model.call instanceof Function) {
          return model.call.apply(model);
        }
      });
    }

    ButtonView.prototype.changed = function() {
      return this.setEnabled(this.getValue(false));
    };

    ButtonView.prototype.setEnabled = function(model) {
      if (this.getEnabled(model)) {
        return this.element.removeAttribute('disabled');
      }
      return this.element.setAttribute('disabled', 'disabled');
    };

    ButtonView.prototype.getEnabled = function(model) {
      var enabled;
      if (model === null) {
        return false;
      }
      if (model instanceof Function) {
        return true;
      }
      if (model instanceof Object) {
        enabled = model.enabled;
      }
      if (enabled instanceof Function) {
        enabled = enabled.apply(model);
      }
      return enabled === true && (model instanceof Function || model.call instanceof Function);
    };

    return ButtonView;

  })(BindIt.View);

  BindIt.View.Button = ButtonView;

  BindIt.View.Default.button = ButtonView;

  BindIt.View.Default.a = ButtonView;

  BindIt.View.Input.byType.button = ButtonView;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var TextView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TextView = (function(_super) {
    __extends(TextView, _super);

    function TextView(element) {
      this.element = element;
      this.calculateEvent = __bind(this.calculateEvent, this);
      this.elementListener = __bind(this.elementListener, this);
      this.keyup = __bind(this.keyup, this);
      TextView.__super__.constructor.call(this, this.element);
      this.changed();
      this.calculateEvent('enter');
      this.calculateEvent('esc');
      this.element.onchange = this.elementListener;
      this.element.onkeyup = this.keyup;
      this.element.onpaste = this.elementListener;
    }

    TextView.prototype.changed = function() {
      this.setEnabled();
      return this.setElementValue(this.getValue());
    };

    TextView.prototype.setEnabled = function() {
      if (this.getValue() != null) {
        return this.element.removeAttribute('disabled');
      }
      return this.element.setAttribute('disabled', 'disabled');
    };

    TextView.prototype.setElementValue = function(value) {
      value = value || '';
      if (this.element.value !== value) {
        return this.element.value = value;
      }
    };

    TextView.prototype.keyup = function(event) {
      this.elementListener();
      if (event.keyCode === 13) {
        if (typeof this.enter === "function") {
          this.enter(event);
        }
      }
      if (event.keyCode === 27) {
        return typeof this.esc === "function" ? this.esc(event) : void 0;
      }
    };

    TextView.prototype.elementListener = function() {
      if (this.element.value !== this.getValue()) {
        return this.setValue(this.element.value);
      }
    };

    TextView.prototype.calculateEvent = function(name) {
      var index, method, parent, parentPath, path,
        _this = this;
      if (!this.element.hasAttribute(name)) {
        return;
      }
      path = this.element.getAttribute(name);
      index = path.lastIndexOf('.');
      parentPath = index < 0 ? 'window' : parentPath = path.substr(0, index);
      try {
        method = eval(path);
        parent = eval(parentPath);
        return this[name] = function(event) {
          if ((method != null) && method instanceof Function) {
            return method.apply(parent, [_this, event]);
          }
        };
      } catch (_error) {}
    };

    return TextView;

  })(BindIt.View);

  BindIt.View.Text = TextView;

  BindIt.View.Default.textarea = TextView;

  BindIt.View.Input.byType.text = TextView;

  BindIt.View.Input.byType.password = TextView;

  BindIt.View.Input.byType.hidden = TextView;

  BindIt.View.Input.byType.email = TextView;

  BindIt.View.Input.byType.search = TextView;

  BindIt.View.Input.byType.tel = TextView;

  BindIt.View.Input.byType.color = TextView;

  BindIt.View.Input.byType.range = TextView;

  BindIt.View.Input.byType.number = TextView;

  BindIt.View.Input.byType.url = TextView;

  BindIt.View.Input.byType.time = TextView;

  BindIt.View.Input.byType.month = TextView;

  BindIt.View.Input.byType.week = TextView;

  BindIt.View.Input.byType.date = TextView;

  BindIt.View.Input.byType.datetime = TextView;

  BindIt.View.Input.byType['datetime-local'] = TextView;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var CheckboxView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CheckboxView = (function(_super) {
    __extends(CheckboxView, _super);

    function CheckboxView(element) {
      CheckboxView.__super__.constructor.call(this, element);
      this.subscribe();
      this.changed();
    }

    CheckboxView.prototype.changed = function() {
      this.setElementValue(this.getValue() === true);
      return this.setElementEnabled(this.getValue() === true || this.getValue() === false);
    };

    CheckboxView.prototype.subscribe = function() {
      var _this = this;
      return this.element.onchange = function() {
        return _this.setValue(_this.getElementValue());
      };
    };

    CheckboxView.prototype.getElementValue = function() {
      return this.element.checked;
    };

    CheckboxView.prototype.setElementValue = function(value) {
      return this.element.checked = value;
    };

    CheckboxView.prototype.setElementEnabled = function(enabled) {
      if (enabled) {
        return this.element.removeAttribute('disabled');
      }
      return this.element.setAttribute('disabled', '');
    };

    return CheckboxView;

  })(BindIt.View);

  BindIt.View.Checkbox = CheckboxView;

  BindIt.View.Input.byType.checkbox = CheckboxView;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var Select, SelectItemView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SelectItemView = (function() {
    function SelectItemView() {}

    SelectItemView.prototype.init = function(view) {
      return view.element.onchange = function() {
        var model;
        model = view.getValue(true);
        if (model == null) {
          return;
        }
        return model.selectedItem = parseInt(view.element.value);
      };
    };

    SelectItemView.prototype.create = function(model, index, selected) {
      var element;
      element = document.createElement('option');
      element.innerHTML = model[index];
      element.setAttribute('value', index);
      this.setSelected(element, model, index, selected);
      return element;
    };

    SelectItemView.prototype.changed = function(element, model, index, selected) {
      element.innerHTML = model[index];
      return this.setSelected(element, model, index, selected);
    };

    SelectItemView.prototype.setSelected = function(element, model, index, selected) {
      if (selected) {
        return element.setAttribute('selected', '');
      }
      return element.removeAttribute('selected');
    };

    return SelectItemView;

  })();

  SelectItemView.instance = new SelectItemView;

  Select = (function(_super) {
    __extends(Select, _super);

    function Select(element) {
      this.element = element;
      Select.__super__.constructor.call(this, this.element);
    }

    Select.prototype.calculateItemView = function() {
      return this.itemView = SelectItemView.instance;
    };

    return Select;

  })(BindIt.View.List);

  Select.ItemView = SelectItemView;

  BindIt.View.Select = Select;

  BindIt.View.Default.select = Select;

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  var RadioView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RadioView = (function(_super) {
    __extends(RadioView, _super);

    function RadioView(element) {
      var _this = this;
      this.element = element;
      RadioView.__super__.constructor.call(this, this.element);
      this.element.onchange = function() {
        return _this.setValue(_this.element.getAttribute(RadioView.VALUE_ATTRIBUTE));
      };
      this.changed();
    }

    RadioView.prototype.changed = function() {
      var value, viewValue;
      viewValue = this.getValue(false);
      value = this.element.getAttribute(RadioView.VALUE_ATTRIBUTE);
      this.setElementEnabled(viewValue != null);
      return this.setElementChecked(viewValue === value);
    };

    RadioView.prototype.setElementEnabled = function(enabled) {
      if (enabled) {
        return this.element.removeAttribute('disabled');
      }
      return this.element.setAttribute('disabled', '');
    };

    RadioView.prototype.setElementChecked = function(checked) {
      if (checked) {
        return this.element.setAttribute('checked', '');
      }
      return this.element.removeAttribute('checked');
    };

    return RadioView;

  })(BindIt.View);

  RadioView.VALUE_ATTRIBUTE = 'value';

  BindIt.View.Radio = RadioView;

  BindIt.View.Input.byType.radio = RadioView;

}).call(this);
